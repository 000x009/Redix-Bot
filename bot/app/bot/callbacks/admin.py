import uuid
from datetime import datetime, timedelta

from aiogram import Router, Bot, F
from aiogram.types import CallbackQuery, Chat, ReplyKeyboardRemove, Message
from aiogram.fsm.context import FSMContext

from dishka import FromDishka
from aiogram_album import AlbumMessage

from aiogram_dialog import DialogManager, StartMode, ShowMode

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger

from app.bot.keyboards import inline
from app.bot.states import MailingSG, UpdateUserSG
from app.services import OrderService, ProductService, UserService, CategoryService, AdminService
from app.schema.order import OrderStatus
from app.bot.states.product import ProductManagementSG
from app.utils import json_text_getter
from app.bot.states.order import CancelOrderSG
from app.bot.states.admin import AdminManagementSG, GiftOrderManagementSG


router = Router()


@router.callback_query(F.data == 'back_apanel')
async def admin_panel_handler(
    query: CallbackQuery,
    bot: Bot,
    event_chat: Chat,
    admin_service: FromDishka[AdminService],
) -> None:
    admin = await admin_service.get(user_id=query.from_user.id)
    await bot.edit_message_text(
        message_id=query.message.message_id,
        chat_id=event_chat.id,
        text="–ê–¥–º–∏–Ω-–º–µ–Ω—é",
        reply_markup=inline.admin_menu_kb_markup(admin.permissions),
    )


# MAILING HANDLERS
@router.callback_query(F.data == 'admin_mailing')
async def mailing_handler(
    query: CallbackQuery,
    bot: Bot,
    event_chat: Chat,
    state: FSMContext,
) -> None:
    await bot.edit_message_text(
        message_id=query.message.message_id,
        chat_id=event_chat.id,
        text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∂–µ–ª–∞–µ—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=inline.back_to_apanel_kb_markup,
    )
    await state.set_state(MailingSG.MESSAGE)


@router.message(MailingSG.MESSAGE, F.media_group_id)
async def mailing_message_handler(
    album_message: AlbumMessage,
    state: FSMContext,
    bot: Bot,
    event_chat: Chat,
    dialog_manager: DialogManager,
) -> None:
    album_photo = [message.photo[-1].file_id for message in album_message]
    await state.update_data(album_photo=album_photo, album_caption=album_message.caption)
    state_data = await state.get_data()
    await dialog_manager.start(
        state=MailingSG.BUTTON,
        data=state_data,
        mode=StartMode.RESET_STACK,
        show_mode=ShowMode.DELETE_AND_SEND,
    )
    

@router.message(MailingSG.MESSAGE)
async def mailing_message_handler(
    message: Message,
    state: FSMContext,
    dialog_manager: DialogManager,
) -> None:
    await state.update_data(message_id=message.message_id)
    state_data = await state.get_data()
    await dialog_manager.start(
        MailingSG.BUTTON,
        data=state_data,
        mode=StartMode.RESET_STACK,
        show_mode=ShowMode.DELETE_AND_SEND,
    )


#User Management
@router.callback_query(F.data == 'user_management')
async def user_profiles_handler(query: CallbackQuery, state: FSMContext) -> None:
    await query.message.answer('üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–π –ø—Ä–æ—Ñ–∏–ª—å —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.')
    await state.set_state(UpdateUserSG.USER_ID)


@router.callback_query(F.data.startswith('top_up_balance'))
async def top_up_handler(
    query: CallbackQuery, 
    state: FSMContext,
    bot: Bot,
    event_chat: Chat,
) -> None:
    user_id = query.data.split(':')[-1]
    await state.update_data(user_id=user_id)
    
    await bot.edit_message_text(
        chat_id=event_chat.id,
        text='–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
        message_id=query.message.message_id,
    )
    await state.set_state(UpdateUserSG.TOP_UP_BALANCE)


@router.callback_query(F.data.startswith('lower_balance'))
async def lower_balance_handler(
    query: CallbackQuery, 
    state: FSMContext,
    bot: Bot,
    event_chat: Chat,
) -> None:
    user_id = query.data.split(':')[-1]
    await state.update_data(user_id=user_id)

    await bot.edit_message_text(
        chat_id=event_chat.id,
        text='–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–Ω—è—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
        message_id=query.message.message_id,
    )
    await state.set_state(UpdateUserSG.LOWER_BALANCE)


@router.callback_query(F.data.startswith('set_balance'))
async def set_balance_handler(
    query: CallbackQuery, 
    state: FSMContext,
    bot: Bot,
    event_chat: Chat,
) -> None:
    user_id = query.data.split(':')[-1]
    await state.update_data(user_id=user_id)
    
    await bot.edit_message_text(
        chat_id=event_chat.id,
        text='–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.',
        message_id=query.message.message_id,
    )
    await state.set_state(UpdateUserSG.SET_BALANCE)


#ORDER
@router.callback_query(F.data.startswith('confirm_order'))
async def confirm_order_handler(
    query: CallbackQuery,
    order_service: FromDishka[OrderService],
    product_service: FromDishka[ProductService],
    bot: Bot,
    event_chat: Chat,
) -> None:
    order_id = query.data.split(':')[-1]
    order = await order_service.get_one_order(id=order_id)

    if order.status == OrderStatus.PROGRESS:
        product = await product_service.get_one_product(id=order.product_id)

        await order_service.update_order(
            order_id=uuid.UUID(order_id),
            status=OrderStatus.COMPLETED,
        )
        await product_service.update_product(product_id=order.product_id, purchase_count=product.purchase_count + 1)

        await bot.send_message(
            chat_id=order.user_id,
            text='‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –±—É–¥—É —Ä–∞–¥ —É–≤–∏–¥–µ—Ç—å—Å—è —Å–Ω–æ–≤–∞, –º–æ–≥–ª–∏ –±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–Ω–∏–∑—É üëá',
            reply_markup=inline.post_feedback_kb_markup(order_id=order.id),
        )
        await query.answer(text='–û—Ç–≤–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!', show_alert=True)
        await bot.delete_message(chat_id=event_chat.id, message_id=query.message.message_id)
    else:
        await query.answer(text='–ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', show_alert=True)
        await bot.delete_message(chat_id=event_chat.id, message_id=query.message.message_id)


@router.callback_query(F.data.startswith('cancel_order_reason'))
async def cancel_order_reason_handler(
    query: CallbackQuery,
    state: FSMContext,
) -> None:
    order_id = query.data.split(':')[-1]
    await state.update_data(order_id=order_id)
    await query.message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞.', reply_markup=inline.cancel_without_reason_kb_markup(order_id=order_id))
    await state.set_state(CancelOrderSG.REASON)


@router.message(CancelOrderSG.REASON)
async def cancel_order_reason_handler(
    message: Message,
    state: FSMContext,
    order_service: FromDishka[OrderService],
    product_service: FromDishka[ProductService],
    user_service: FromDishka[UserService],
    bot: Bot,
    event_chat: Chat,
) -> None:
    order_id = (await state.get_data()).get('order_id')
    order = await order_service.get_one_order(id=order_id)

    try:
        if order.status == OrderStatus.PROGRESS:
            user = await user_service.get_one_user(user_id=order.user_id)
            product = await product_service.get_one_product(id=order.product_id)

            await order_service.update_order(
                order_id=uuid.UUID(order_id),
                status=OrderStatus.CLOSED,
                cancel_reason=message.text,
            )
            await user_service.update_user(user_id=order.user_id, balance=user.balance + order.price)

            await bot.send_message(
                chat_id=order.user_id,
                text=f'‚ùå –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ {product.name} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {message.text}. –°—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç.',
            )
            await message.answer(text='–û—Ç–≤–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!', show_alert=True)
            await bot.delete_message(chat_id=event_chat.id, message_id=message.message_id)
        else:
            await message.answer(text='–ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', show_alert=True)
            await bot.delete_message(chat_id=event_chat.id, message_id=message.message_id)
    except Exception as ex:
        print(ex)
    finally:
        await state.clear()

@router.callback_query(F.data.startswith('cancel_order'))
async def cancel_order_handler(
    query: CallbackQuery,
    order_service: FromDishka[OrderService],
    product_service: FromDishka[ProductService],
    user_service: FromDishka[UserService],
    bot: Bot,
    event_chat: Chat,
) -> None:
    order_id = query.data.split(':')[-1]
    order = await order_service.get_one_order(id=order_id)
    
    if order.status == OrderStatus.PROGRESS:
        user = await user_service.get_one_user(user_id=order.user_id)
        product = await product_service.get_one_product(id=order.product_id)

        await order_service.update_order(
            order_id=uuid.UUID(order_id),
            status=OrderStatus.CLOSED,
        )
        await user_service.update_user(user_id=order.user_id, balance=user.balance + order.price)

        await bot.send_message(
            chat_id=order.user_id,
            text=f'‚ùå –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ {product.name} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω! –°—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç.',
        )
        await query.answer(text='–û—Ç–≤–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!', show_alert=True)
        await bot.delete_message(chat_id=event_chat.id, message_id=query.message.message_id)
    else:
        await query.answer(text='–ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', show_alert=True)
        await bot.delete_message(chat_id=event_chat.id, message_id=query.message.message_id)


@router.callback_query(F.data == 'product_management')
async def product_management_handler(
    query: CallbackQuery,
    dialog_manager: DialogManager,
) -> None:
    await dialog_manager.start(
        ProductManagementSG.GAMES,
        mode=StartMode.RESET_STACK,
        show_mode=ShowMode.DELETE_AND_SEND,
    )


@router.callback_query(F.data.startswith('take_order'))
async def take_order_handler(
    query: CallbackQuery,
    bot: Bot,
    event_chat: Chat,
    order_service: FromDishka[OrderService],
    product_service: FromDishka[ProductService],
    category_service: FromDishka[CategoryService],
) -> None:
    order_id = query.data.split(':')[-1]
    order = await order_service.get_one_order(id=order_id)
    product = await product_service.get_one_product(id=order.product_id)
    category = await category_service.get_category(id=product.category_id)

    await order_service.update_order(
        order_id=uuid.UUID(order_id),
        admin_id=query.from_user.id,
    )
    if product.is_gift_purchase:
        await bot.send_message(
            chat_id=query.from_user.id,
            text=json_text_getter.get_order_info_text(
                user_id=query.from_user.id,
                order_id=order_id,
                order_data=order.additional_data,
                product=product,
                category=category.name,
            ),
            reply_markup=inline.gift_order_confirmation_kb_markup(order_id=order_id)
        )
    else:
        await bot.send_message(
            chat_id=query.from_user.id,
            text=json_text_getter.get_order_info_text(
                user_id=query.from_user.id,
                order_id=order_id,
                order_data=order.additional_data,
                product=product,
                category=category.name,
            ),
            reply_markup=inline.order_confirmation_kb_markup(order_id=order_id)
        )
    await bot.delete_message(chat_id=event_chat.id, message_id=query.message.message_id)



@router.callback_query(F.data.startswith('add_to_friends'))
async def add_to_friends_handler(
    query: CallbackQuery,
    bot: Bot,
    event_chat: Chat,
    state: FSMContext,
) -> None:
    order_id = query.data.split(':')[-1]
    await bot.send_message(chat_id=event_chat.id, text='–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.')

    await state.update_data(order_id=order_id)
    await state.set_state(GiftOrderManagementSG.MESSAGE_TO_USER)


@router.message(GiftOrderManagementSG.MESSAGE_TO_USER)
async def message_to_user_handler(
    message: Message,
    state: FSMContext,
    order_service: FromDishka[OrderService],
    bot: Bot,
    event_chat: Chat,
) -> None:
    message_to_user = message.text
    order_id = (await state.get_data()).get('order_id')
    order = await order_service.get_one_order(id=uuid.UUID(order_id))
    await bot.send_message(
        chat_id=order.user_id,
        text=f"–ü—Ä–∏–º–∏—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è Supercell ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞. (–ü–æ—Å–ª–µ –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá)\n\n{message_to_user}",
        reply_markup=inline.accept_friend_request_kb_markup(order_id=order_id)
    )
    await message.answer(text='–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!', show_alert=True)
    await state.clear()


@router.callback_query(F.data.startswith('accept_request'))
async def accept_request_handler(
    query: CallbackQuery,
    order_service: FromDishka[OrderService],
    product_service: FromDishka[ProductService],
    category_service: FromDishka[CategoryService],
    bot: Bot,
    event_chat: Chat,
) -> None:
    order_id = query.data.split(':')[-1]
    order = await order_service.get_one_order(id=uuid.UUID(order_id))
    product = await product_service.get_one_product(id=order.product_id)
    category = await category_service.get_category(id=product.category_id)
    await bot.delete_message(chat_id=event_chat.id, message_id=query.message.message_id)
    order_text = json_text_getter.get_order_info_text(
        user_id=order.user_id,
        order_id=order_id,
        order_data=order.additional_data,
        product=product,
        category=category.name,
    )
    await bot.send_message(
        chat_id=order.admin_id,
        text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {order.user_id} –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è. –í–æ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞:\n\n{order_text}',
        reply_markup=inline.accepted_friend_request_kb_markup(order_id=order_id)
    )


async def send_order_to_admin(bot: Bot, order_text: str, admin_id: int, order_id: uuid.UUID) -> None:
    await bot.send_message(
        chat_id=admin_id,
        text=order_text,
        reply_markup=inline.order_confirmation_kb_markup(order_id=order_id)
    )

@router.callback_query(F.data.startswith('confirm_request'))
async def confirm_request_handler(
    query: CallbackQuery,
    order_service: FromDishka[OrderService],
    product_service: FromDishka[ProductService],
    category_service: FromDishka[CategoryService],
    bot: Bot,
    event_chat: Chat,
    scheduler: AsyncIOScheduler,
) -> None:
    order_id = query.data.split(':')[-1]
    order = await order_service.get_one_order(id=uuid.UUID(order_id))
    product = await product_service.get_one_product(id=order.product_id)
    category = await category_service.get_category(id=product.category_id)
    scheduler.add_job(
        send_order_to_admin,
        trigger=DateTrigger(run_date=datetime.now() + timedelta(hours=24)),
        kwargs={
            'order_text': json_text_getter.get_order_info_text(
                user_id=order.user_id,
                order_id=order_id,
                order_data=order.additional_data,
                product=product,
                category=category.name,
            ),
            'admin_id': order.admin_id,
            'order_id': order_id,
        },
    )
    await query.answer(text='–í—Å–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ 24 —á–∞—Å–∞!', show_alert=True)
    await bot.send_message(chat_id=order.user_id, text='–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ 24 —á–∞—Å–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ –º—ã –ø–æ–¥–∞—Ä–∏–º –≤–∞–º —Ç–æ–≤–∞—Ä –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç')
    await bot.delete_message(chat_id=event_chat.id, message_id=query.message.message_id)


@router.callback_query(F.data == 'bot_statistics')
async def bot_statistics_handler(
    query: CallbackQuery,
    bot: Bot,
    event_chat: Chat,
    product_service: FromDishka[ProductService],
    user_service: FromDishka[UserService],
) -> None:
    stats = await product_service.get_purchase_statistics()
    users_count = await user_service.get_new_users_amount()

    await bot.edit_message_text(
        chat_id=event_chat.id,
        text=f"""
<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫:</b>
–ó–∞ –¥–µ–Ω—å: {stats['count']['today']}
–ó–∞ –Ω–µ–¥–µ–ª—é: {stats['count']['week']}
–ó–∞ –º–µ—Å—è—Ü: {stats['count']['month']}
–ó–∞ –≥–æ–¥: {stats['count']['year']}
–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: {stats['count']['all_time']}

<b>–°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫:</b>
–ó–∞ –¥–µ–Ω—å: {stats['amount']['today']} ‚ÇΩ
–ó–∞ –Ω–µ–¥–µ–ª—é: {stats['amount']['week']} ‚ÇΩ
–ó–∞ –º–µ—Å—è—Ü: {stats['amount']['month']} ‚ÇΩ
–ó–∞ –≥–æ–¥: {stats['amount']['year']} ‚ÇΩ
–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: {stats['amount']['all_time']} ‚ÇΩ

<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—à–µ–¥—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
–ó–∞ –¥–µ–Ω—å: {users_count['today']}
–ó–∞ –Ω–µ–¥–µ–ª—é: {users_count['week']}
–ó–∞ –º–µ—Å—è—Ü: {users_count['month']}
–ó–∞ –≥–æ–¥: {users_count['year']}
–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: {users_count['all_time']}
""",
        message_id=query.message.message_id,
        reply_markup=inline.back_to_apanel_kb_markup,
    )


@router.callback_query(F.data == 'admin_management')
async def admin_management_handler(
    query: CallbackQuery,
    dialog_manager: DialogManager,
) -> None:
    await dialog_manager.start(
        AdminManagementSG.ADMIN_LIST,
        mode=StartMode.RESET_STACK,
        show_mode=ShowMode.DELETE_AND_SEND,
    )
