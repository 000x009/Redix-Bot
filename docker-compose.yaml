services:
  nginx:
    image: nginx:stable-alpine
    user: root
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - './nginx.conf:/etc/nginx/nginx.conf'
      - '/etc/letsencrypt:/etc/letsencrypt'
    depends_on:
      - redix_backend
      - redix_frontend
    networks:
      - default
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  redix_db:
    image: postgres:15-alpine
    container_name: redix_db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./paradox.sql:/docker-entrypoint-initdb.d/paradox.sql
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    restart: on-failure
    networks:
      - default
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${DB_NAME}"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

  redix_backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    volumes:
      - ./backend:/app
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=redix_db
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - BILEE_SHOP_ID=${BILEE_SHOP_ID}
      - BILEE_PASSWORD=${BILEE_PASSWORD}
      - BOT_TOKEN=${BOT_TOKEN}
      - BOT_URL=${BOT_URL}
      - CONFIG_PATH=${CONFIG_PATH}
      - YANDEX_STORAGE_TOKEN=${YANDEX_STORAGE_TOKEN}
      - YANDEX_STORAGE_SECRET=${YANDEX_STORAGE_SECRET}
      - YANDEX_STORAGE_BUCKET_NAME=${YANDEX_STORAGE_BUCKET_NAME}
    restart: on-failure
    container_name: redix_backend
    ports:
      - 8000:8000
    depends_on:
      - redix_db
        # condition: service_healthy
    command: sh -c "alembic upgrade head && uvicorn src.main.main:app --host 0.0.0.0 --port 8000 --reload"
    networks:
      - default

  redix_bot:
    image: redix_bot
    build:
      context: ./bot
      dockerfile: Dockerfile.bot
    volumes:
      - ./bot:/app
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=redix_db
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - BILEE_SHOP_ID=${BILEE_SHOP_ID}
      - BILEE_PASSWORD=${BILEE_PASSWORD}
      - BOT_TOKEN=${BOT_TOKEN}
      - BOT_URL=${BOT_URL}
      - CONFIG_PATH=${CONFIG_PATH}
      - YANDEX_STORAGE_TOKEN=${YANDEX_STORAGE_TOKEN}
      - YANDEX_STORAGE_SECRET=${YANDEX_STORAGE_SECRET}
      - YANDEX_STORAGE_BUCKET_NAME=${YANDEX_STORAGE_BUCKET_NAME}
    command: "python -m app.main"
    depends_on:
      - redix_db
        # condition: service_healthy
    restart: on-failure
    networks:
      - default

  redix_frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    container_name: redix_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    stdin_open: true
    tty: true
    depends_on:
      - redix_backend
    environment:
      - API_URL=http://redix_backend:8000
    networks:
      - default
  
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"

volumes:
  postgres_data:
  postgres_recovery:

networks:
  default:
    name: redix_network
    driver: bridge